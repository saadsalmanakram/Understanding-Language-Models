>> Training Without the Trainer Class

   In this guide, we'll achieve the same results as before, but without using the `Trainer` class. This approach gives you more control over each step. We assume you've already processed your data as explained earlier.

>> Setting Up

   Start by importing the necessary libraries and loading your dataset:

python code

'''
from datasets import load_dataset
from transformers import AutoTokenizer, DataCollatorWithPadding

raw_datasets = load_dataset("glue", "mrpc")
checkpoint = "bert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(checkpoint)
'''

Next, create a function to tokenize the data:

python code

'''
def tokenize_function(example):
    return tokenizer(example["sentence1"], example["sentence2"], truncation=True)

tokenized_datasets = raw_datasets.map(tokenize_function, batched=True)
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)
'''

>> Preparing for Training

   Before we can create the dataloaders for training, we need to do some additional processing:

   1. **Remove unnecessary columns** from the dataset.
   2. **Rename the label column** to `labels` so the model understands it.
   3. **Set the dataset format** to return PyTorch tensors.

Here's how you can do that:

python code

'''
tokenized_datasets = tokenized_datasets.remove_columns(["sentence1", "sentence2", "idx"])
tokenized_datasets = tokenized_datasets.rename_column("label", "labels")
tokenized_datasets.set_format("torch")
'''

Now, let's check the columns to ensure they are correct:

python code

'''
tokenized_datasets["train"].column_names
# Output: ['attention_mask', 'input_ids', 'labels', 'token_type_ids']
'''

>> Creating Dataloaders

   We can now define the dataloaders:

python code

'''
from torch.utils.data import DataLoader

train_dataloader = DataLoader(tokenized_datasets["train"], shuffle=True, batch_size=8, collate_fn=data_collator)
eval_dataloader = DataLoader(tokenized_datasets["validation"], batch_size=8, collate_fn=data_collator)
'''

You can inspect a batch to make sure everything is set up correctly:

python code

'''
for batch in train_dataloader:
    break

{k: v.shape for k, v in batch.items()}
'''

>> Setting Up the Model

   Next, load the model and pass a batch to ensure it works as expected:

python code

'''
from transformers import AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(checkpoint, num_labels=2)
outputs = model(**batch)
print(outputs.loss, outputs.logits.shape)
'''

>> Setting Up the Optimizer and Scheduler

   We need an optimizer and a learning rate scheduler to manage the training process:

python code

'''
from transformers import AdamW, get_scheduler

optimizer = AdamW(model.parameters(), lr=5e-5)
num_epochs = 3
num_training_steps = num_epochs * len(train_dataloader)
lr_scheduler = get_scheduler(
    "linear",
    optimizer=optimizer,
    num_warmup_steps=0,
    num_training_steps=num_training_steps,
)
'''

>> Training Loop

   We'll use a GPU if available for faster training. Define the device and move the model to it:

python code

'''
import torch
from tqdm.auto import tqdm

device = torch.device("cuda") if torch.cuda.is_available() else torch.device("cpu")
model.to(device)

progress_bar = tqdm(range(num_training_steps))

model.train()
for epoch in range(num_epochs):
    for batch in train_dataloader:
        batch = {k: v.to(device) for k, v in batch.items()}
        outputs = model(**batch)
        loss = outputs.loss
        loss.backward()

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)
'''

>> Evaluation Loop

   After training, evaluate the model to see how well it performs:

python code

'''
import evaluate

metric = evaluate.load("glue", "mrpc")
model.eval()
for batch in eval_dataloader:
    batch = {k: v.to(device) for k, v in batch.items()}
    with torch.no_grad():
        outputs = model(**batch)

    logits = outputs.logits
    predictions = torch.argmax(logits, dim=-1)
    metric.add_batch(predictions=predictions, references=batch["labels"])

print(metric.compute())
'''

>> Accelerating with ðŸ¤— Accelerate

   For more advanced setups, you can use the ðŸ¤— Accelerate library to scale training across multiple GPUs or TPUs with minimal changes. Here's how to modify the code for distributed training:

1. Import `Accelerator` and set it up:

    python code
    '''
    from accelerate import Accelerator

    accelerator = Accelerator()
    '''

2. Wrap your dataloaders, model, and optimizer with `accelerator.prepare()`:

    python code
    '''
    train_dataloader, eval_dataloader, model, optimizer = accelerator.prepare(
        train_dataloader, eval_dataloader, model, optimizer
    )
    '''

3. Replace `loss.backward()` with `accelerator.backward(loss)` and remove any device-specific code.

Here's what the final training loop looks like with `Accelerate`:

python code

'''
model.train()
for epoch in range(num_epochs):
    for batch in train_dataloader:
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(1)
'''

You can run this code in a distributed setup using `accelerate config` to set up the environment, followed by `accelerate launch train.py` to start training.

If running in a notebook, use `notebook_launcher` to execute the training loop.
